var _$_3c22=["readline-sync","bcrypt","i18n","mongoose","../model/user","setLocale","register","__","log","enterUsername","question","findOne","existingUser","disconnect","enterPassword","","hash","save","registerSuccessful","incorrectRegistration","error","exports"];const readlineSync=require(_$_3c22[0]),bcrypt=require(_$_3c22[1]),i18n=require(_$_3c22[2]),mongoose=require(_$_3c22[3]),User=require(_$_3c22[4]);async function register(_0x54D8){i18n[_$_3c22[5]](_0x54D8);try{console[_$_3c22[8]](i18n[_$_3c22[7]](_$_3c22[6]));let _0x557C=readlineSync[_$_3c22[10]](i18n[_$_3c22[7]](_$_3c22[9])),_0x5620= await User[_$_3c22[11]]({username:_0x557C});if(_0x5620){console[_$_3c22[8]](i18n[_$_3c22[7]](_$_3c22[12])),mongoose[_$_3c22[13]]();return};let _0x5672=readlineSync[_$_3c22[10]](i18n[_$_3c22[7]](_$_3c22[14]),{hideEchoBack:!0,mask:_$_3c22[15]}),_0x552A= await bcrypt[_$_3c22[16]](_0x5672,10),_0x55CE= new User({username:_0x557C,password:_0x552A}); await _0x55CE[_$_3c22[17]](),console[_$_3c22[8]](i18n[_$_3c22[7]](_$_3c22[18])),mongoose[_$_3c22[13]]()}catch(t){console[_$_3c22[20]](i18n[_$_3c22[7]](_$_3c22[19]),t)}}module[_$_3c22[21]]= register